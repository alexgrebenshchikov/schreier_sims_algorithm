#include <iostream>
#include "schreier.h"

int main() {
    std::set<Perm> st;
    std::vector<int> v1, v2, v3, v4, v5, v6, v7, v8;


    v1 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 27, 18, 19, 20, 21, 17, 23, 24, 25, 26, 22, 28, 29,
          30, 31, 32, 33, 34, 35};

    v2 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 29, 13, 14, 30, 28, 27, 18, 19, 15, 21, 17, 16, 12, 25, 26, 22, 23, 24,
          20, 31, 32, 33, 34, 35};

    v3 = {0, 1, 2, 3, 4, 9, 6, 7, 8, 18, 10, 11, 12, 13, 14, 15, 16, 17, 5, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
          30, 31, 32, 33, 34, 35};

    v4 = {0, 1, 2, 3, 4, 9, 10, 11, 12, 18, 19, 20, 21, 13, 14, 15, 16, 17, 5, 6, 7, 8, 22, 23, 24, 25, 26, 27, 28, 29,
          30, 31, 32, 33, 34, 35};

    v5 = {0, 1, 2, 3, 31, 5, 6, 7, 8, 9, 10, 11, 12, 4, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
          30, 13, 32, 33, 34, 35};

    v6 = {0, 1, 29, 32, 31, 5, 6, 7, 33, 9, 10, 2, 12, 4, 3, 8, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 11,
          30, 13, 14, 15, 34, 35};

    v7 = {26, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 35, 27, 28, 29,
          30, 31, 32, 33, 34, 0};

    v8 = {26, 25, 21, 3, 4, 5, 6, 24, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 30, 22, 23, 33, 34, 35, 27, 28,
          29,
          2, 31, 32, 7, 1,
          0}; /* Это 8 возможных поворотов пирамиды Мефферта. Точки 0,1,2,3,4 соответствуют нижнему основанию одной из граней*/

    st.insert(Perm(v1));
    st.insert(Perm(v2));
    st.insert(Perm(v3));
    st.insert(Perm(v4));
    st.insert(Perm(v5));
    st.insert(Perm(v6));
    st.insert(Perm(v7));
    st.insert(Perm(v8));


    Full_stabs_chain ans;
    schreier_sims(st, ans, 36);

    std::cout << "Порядок группы: " << ans.get_group_size()
              << '\n'; /* Количество всех возможных конфигураций пирамидки это порядок группы порожденной этими поворотами*/

     std::cout
             << "Такие преобразования нужно использовать,чтобы получить все конфигурации у которых нижнее основание одной из граней такое же как исходной пирамиды\n";
     /* Это просто образующие Stab(0...4)*/
     std::cout << "После каждой перестановки указано её разложение через исходные\n";

    for (const auto &i : ans.stabs[4]) {
         i.print();
         std::cout << "{";
         for(auto j : ans.perm_n[i])
             std::cout << j <<", ";
         std::cout << "}\n\n";
    }







    return 0;
}

